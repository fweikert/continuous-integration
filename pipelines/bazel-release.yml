---
steps:
  - label: "Set up"
    agents:
      - "queue=default"
    plugins:
      docker#v3.8.0:
        always-pull: true
        environment:
          - ANDROID_HOME
          - ANDROID_NDK_HOME
          - BUILDKITE_ARTIFACT_UPLOAD_DESTINATION
        image: gcr.io/bazel-public/ubuntu2004-java11
        network: host
        privileged: true
        propagate-environment: true
        propagate-uid-gid: true
        shell: ["/bin/bash", "-e", "-c"]
        volumes:
          - "/etc/group:/etc/group:ro"
          - "/etc/passwd:/etc/passwd:ro"
          - "/etc/shadow:/etc/shadow:ro"
          - "/opt/android-ndk-r15c:/opt/android-ndk-r15c:ro"
          - "/opt/android-sdk-linux:/opt/android-sdk-linux:ro"
          - "/var/lib/buildkite-agent:/var/lib/buildkite-agent"
          - "/var/lib/gitmirrors:/var/lib/gitmirrors:ro"
          - "/var/run/docker.sock:/var/run/docker.sock"
    command: |
      git fetch origin ${BUILDKITE_BRANCH}
      git checkout ${BUILDKITE_BRANCH}

      release_name=\$(source scripts/release/common.sh; get_full_release_name)
      echo "release_name = \"\$release_name\""
      buildkite-agent meta-data set "release_name" "\$release_name"
      
      mode="release"
      if [[ \"\$release_name\" =~ .*rc.* ]]; then
        mode="rc"
      fi
      echo "mode = \"\$mode\""
      buildkite-agent meta-data set "mode" "\$mode"
      
      choco_key=$(gsutil cat gs://bazel-trusted-encrypted-secrets/choco-trusted-token.enc | gcloud kms decrypt --project bazel-public --location global --keyring buildkite --key choco-trusted-token --ciphertext-file - --plaintext-file -)
      buildkite-agent meta-data set "choco_key" "\$choco_key"

  - wait

  - label: macOS
    agents:
      - queue=macos
    command: |
      git fetch origin ${BUILDKITE_BRANCH}
      git checkout ${BUILDKITE_BRANCH}

      release_name=$(buildkite-agent meta-data get "release_name")
      echo "release_name = \"\$release_name\""

      curl -sS "https://raw.githubusercontent.com/fweikert/continuous-integration/trusted-cache-test/buildkite/bazelci.py?$(date +%s)" -o bazelci.py
      REMOTE_FLAGS=$(python3 -c "import bazelci; print(' '.join(bazelci.remote_caching_flags('macos')));")

      bazel build "${REMOTE_FLAGS}" //src:bazel
      mkdir output
      cp bazel-bin/src/bazel output/bazel

      output/bazel build \
          --define IPHONE_SDK=1 \
          -c opt \
          --stamp \
          --embed_label "\${release_name}" \
          --workspace_status_command=scripts/ci/build_status_command.sh \
          src/bazel \
          src/bazel_nojdk \
          scripts/packages/with-jdk/install.sh

      mkdir artifacts
      cp "bazel-bin/src/bazel" "artifacts/bazel-\${release_name}-darwin-x86_64"
      cp "bazel-bin/src/bazel_nojdk" "artifacts/bazel_nojdk-\${release_name}-darwin-x86_64"
      cp "bazel-bin/scripts/packages/with-jdk/install.sh" "artifacts/bazel-\${release_name}-installer-darwin-x86_64.sh"

      cd artifacts
      buildkite-agent artifact upload "*"

  - label: macOS (arm64)
    agents:
      - queue=macos_arm64
    command: |
      git fetch origin ${BUILDKITE_BRANCH}
      git checkout ${BUILDKITE_BRANCH}

      release_name=$(buildkite-agent meta-data get "release_name")
      echo "release_name = \"\$release_name\""

      curl -sS "https://raw.githubusercontent.com/fweikert/continuous-integration/trusted-cache-test/buildkite/bazelci.py?$(date +%s)" -o bazelci.py
      REMOTE_FLAGS=$(python3 -c "import bazelci; print(' '.join(bazelci.remote_caching_flags('macos_arm64')));")

      bazel build "${REMOTE_FLAGS}" //src:bazel
      mkdir output
      cp bazel-bin/src/bazel output/bazel

      output/bazel build \
          --define IPHONE_SDK=1 \
          -c opt \
          --stamp \
          --embed_label "\${release_name}" \
          --workspace_status_command=scripts/ci/build_status_command.sh \
          --cpu=darwin_arm64 \
          src/bazel \
          src/bazel_nojdk \
          scripts/packages/with-jdk/install.sh

      mkdir artifacts
      cp "bazel-bin/src/bazel" "artifacts/bazel-\${release_name}-darwin-arm64"
      cp "bazel-bin/src/bazel_nojdk" "artifacts/bazel_nojdk-\${release_name}-darwin-arm64"
      cp "bazel-bin/scripts/packages/with-jdk/install.sh" "artifacts/bazel-\${release_name}-installer-darwin-arm64.sh"

      cd artifacts
      buildkite-agent artifact upload "*"

  - wait
